package br.exercicio.main;
 
import java.util.Collections;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

import br.exercicio.thread.Popula;
 
/**
 * @author Crunchify.com
 *
 */
 
public class Start1ThreadPopula2ThreadsConsome {
 

 

	public static Map<String, Integer> crunchifySynchronizedMapObject = null;

 
	public static void main(String[] args) throws InterruptedException {
 
			Popula p = new Popula(crunchifySynchronizedMapObject);
			p.run();
			
						
 
	 
	
 
	}
	
	
	
	
	
	
 
	public static void crunchifyPerformTest(final Map<String, Integer> crunchifyThreads) throws InterruptedException {
 
		System.out.println("Test started for: " + crunchifyThreads.getClass());
		
		
		for (int i = 0; i < 5; i++) {
 
			long startTime = System.nanoTime();
			ExecutorService crunchifyExServer = Executors.newFixedThreadPool(5);
 
			for (int j = 0; j < 5; j++) {
				crunchifyExServer.execute(new Runnable() {
					@SuppressWarnings("unused")
					@Override
					public void run() {
 
						for (int i = 0; i < 5000; i++) {
						
							
							// Retrieve value. We are not using it anywhere
							Integer crunchifyValue = crunchifyThreads.get(String.valueOf(crunchifyRandomNumber));
 
							
						}
					}
				});
			}
 
			crunchifyExServer.shutdown();
 
					}
	
	}
}